import streamlit as st
import random
import string
import sqlite3
import bcrypt
import pandas as pd
from datetime import datetime
import os
import base64

# Database setup for storing passwords
def init_password_db():
    conn = sqlite3.connect("passwords.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS passwords (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                username TEXT,
                password TEXT,
                created_at TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )''')
    conn.commit()
    conn.close()

# User authentication functions
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

def verify_password(password, hashed_password):
    return bcrypt.checkpw(password.encode(), hashed_password.encode())

def register_user(username, password, country, dob):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    hashed_password = hash_password(password)
    try:
        c.execute("INSERT INTO users (username, password, country, dob) VALUES (?, ?, ?, ?)",(username, hashed_password, country, dob))
        conn.commit()
        st.success("User registered successfully!")
    except sqlite3.IntegrityError:
        st.error("Username already exists!")
    conn.close()

def authenticate_user(username, password):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT id, password FROM users WHERE username = ?", (username,))
    user = c.fetchone()
    conn.close()
    if user and verify_password(password, user[1]):
        return user[0]
    return None

# Password generator and storage functions
def generate_password(length=12, use_upper=True, use_lower=True, use_digits=True, use_specials=True):
    chars = ""
    if use_upper:
        chars += string.ascii_uppercase
    if use_lower:
        chars += string.ascii_lowercase
    if use_digits:
        chars += string.digits
    if use_specials:
        chars += string.punctuation
    if not chars:
        chars = string.ascii_letters  # Default to letters if no options are selected
    return ''.join(random.choice(chars) for _ in range(length))

def store_password(user_id, username, password):
    conn = sqlite3.connect("passwords.db")
    c = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    encrypted_password = base64.b64encode(password.encode()).decode()
    c.execute("INSERT INTO passwords (user_id, username, password, created_at) VALUES (?, ?, ?, ?)",(user_id, username, encrypted_password, timestamp))
    conn.commit()
    conn.close()

def view_stored_passwords():
    conn = sqlite3.connect("passwords.db")
    df = pd.read_sql_query("SELECT username, password, created_at FROM passwords", conn)
    df['password'] = df['password'].apply(lambda x: base64.b64decode(x).decode())
    conn.close()
    return df

def download_csv(df, filename):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}">Download CSV File</a>'
    return href

#login history
def store_login_history(username):
    conn = sqlite3.connect("login_history.db")
    c = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute("INSERT INTO login_history (username, login_time) VALUES (?, ?)", (username, timestamp))
    conn.commit()
    conn.close()

def view_login_history():
    conn = sqlite3.connect("login_history.db")
    df = pd.read_sql_query("SELECT * FROM login_history", conn)
    conn.close()
    return df

def init_login_history_db():
    conn = sqlite3.connect("login_history.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS login_history (
                id INTEGER PRIMARY KEY,
                username TEXT,
                login_time TEXT
            )''')
    conn.commit()
    conn.close()

# Initialize databases
init_login_history_db()
init_password_db()

st.title("Secure Password Manager & Text Editor")

if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False
    st.session_state["user_id"] = None
    st.session_state["username"] = ""

if not st.session_state["authenticated"]:
    menu = ["Login", "Register"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Register":
        st.subheader("Register")
        new_user = st.text_input("Username")
        new_password = st.text_input("Password", type="password")
        country = st.text_input("Country")
        dob = st.date_input("Date of Birth")
        if st.button("Register"):
            register_user(new_user, new_password, country, str(dob))

    elif choice == "Login":
        st.subheader("Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            user_id = authenticate_user(username, password)
            if user_id:
                st.session_state["authenticated"] = True
                st.session_state["user_id"] = user_id
                st.session_state["username"] = username
                st.rerun()
            else:
                st.error("Invalid credentials!")
else:
    menu = ["Password Generator", "Text Editor", "Stored Passwords", "Login History"]
    choice = st.sidebar.selectbox("Menu", menu)
    
    if choice == "Password Generator":
        st.header("Password Generator")
        length = st.slider("Select Password Length", min_value=6, max_value=32, value=12)
        use_upper = st.checkbox("Include Uppercase Letters", value=True)
        use_lower = st.checkbox("Include Lowercase Letters", value=True)
        use_digits = st.checkbox("Include Numbers", value=True)
        use_specials = st.checkbox("Include Special Characters", value=True)
        
        if st.button("Generate Password"):
            password = generate_password(length, use_upper, use_lower, use_digits, use_specials)
            st.text_input("Generated Password", password)
            store_password(st.session_state["user_id"], st.session_state["username"], password)
    
    if choice == "Stored Passwords":
        st.header("Stored Passwords")
        df = view_stored_passwords()
        st.dataframe(df)
        st.markdown(download_csv(df, "stored_passwords.csv"), unsafe_allow_html=True)
    
    if choice == "Text Editor":
        st.header("Text Editor")
        file_list = [f for f in os.listdir() if f.endswith(".txt")]
        selected_file = st.selectbox("Select a file to edit or create a new file", ["New File"] + file_list)
        content = ""
        if selected_file != "New File":
            with open(selected_file, "r") as f:
                content = f.read()
        text_area = st.text_area("Edit your text here", content, height=300)
        file_name = st.text_input("Enter file name (including .txt)")
        if st.button("Save File"):
            if file_name:
                with open(file_name, "w") as f:
                    f.write(text_area)
                st.success(f"File '{file_name}' saved successfully!")
            else:
                st.error("Please enter a valid file name.")
    
    if choice == "Login History":
        st.header("Login History")
        df = view_login_history()
        st.dataframe(df)
        st.markdown(download_csv(df, "login_history.csv"), unsafe_allow_html=True)
